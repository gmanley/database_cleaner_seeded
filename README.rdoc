= Seeded strategy for Database Cleaner + Active Record

Restore the database to a seeded state between tests, in a way that's compatible with feature tests that are run in multiple threads.

== Why?

The excellent Database Cleaner library provides a range of strategies for cleaning your database between RSpec tests. The gem's 'transaction' strategy is a fast way to rollback database state between isolated tests, and can be used to rollback the database state to a seeded baseline before each test. However, it isn't compatible with tests that run with multiple threads (i.e., most integrated tests), and so to make seeds available for each of these tests, you may need to run seed code before each test.

If you don't need to run seeds before each feature test, I salute your test structure! If you do, this gem may make it faster to set them up between tests.

This gem allows you to restore the database to a seeded state using direct DBMS operations (using an SQL restore function) instead of ruby code. If you have a test suite with a considerable reliance on seeded data, this gem may speed up your test suite. I've seen speed benefits of up to 30% with some projects.

== How?

Before your feature test suite runs, a code block is run once to generate a raw seeds file. Then, before each test is run, your database is restored using your DBMS using direct injection of those seeds. This is usually significantly faster than generating seeds using Ruby, and inserting them individually before each test... but, because of the overhead associated with this approach, YMMV.

Currently, this gem only supports MYSQL, and doesn't support database connections that require a password.

To get started, add this gem to your Gemfile, require it in your spec/rails_helper.rb, and tell it which proc to call to setup your feature test seeds:

```
# spec/support/seed_data_helper.rb

def seed_for_every_test
  seed_foos
  seed_bars
  seed_bazzes
end
```

```
# spec/rails_helper.rb
...

Dir[Rails.root.join("spec/support/**/*.rb")].each { |f| require f }

require 'database_cleaner/active_record/seeded'

include SeedDataHelper

RSpec.configure do |config|
  ...

  config.before(:suite) do
    # Prepare the seeds file if we're running feature tests in this test run

    if config.files_to_run.any? {|f| /spec\/features\//.match(f) }
      DatabaseCleaner.prepare_with(:seeded) { seed_for_every_feature_test }
    end
  end

  config.around(:each) do |example|
    DatabaseCleaner.strategy = example.metadata[:type] == :feature ? :seeded : :transaction
    DatabaseCleaner.cleaning { example.run }
  end
end
```

== Notes on suite speed - option to re-use seeds

This gem involves a trade-off of faster seeding between tests, for slower booting of the test suite (with the initial seeding process). Depending on your requirements and the way that you run your test suite, you may re-use the existing seeds file (by default this lives at tmp/database_cleaner/seeds/feature_test_seeds.sql). This gem exposes an option for you to decide when to re-use seeds, in the form of a proc:

```
DatabaseCleaner::Seeded.configure do
  config.regenerate_seeds = -> { !! ENV['RESEED'] }
end
```

With this code, by default, the existing seeds will be used if they exist. But, running `RESEED=true rspec spec/features will force regeneration of the seeds`. Use this option with caution - if you change your data model and don't regenerate the seeds, you might experience failures that are hard to diagnose. By default, seeds will be always regenerated before each suite.

== Todo

- Add support for other DBMSs

== Development & Feedback

Have questions or encountered problems? Please use the {issue tracker}[https://github.com/michaeldawson/database_cleaner_seeded/issues]. If you would like to contribute to this project, fork this repository, then run +bundle+ and +rake+ to run the tests. Pull requests appreciated.
